use crate::types::Unit;


pub struct BitmapFont<'a> {
    span: usize,
    pub height: Unit,
    pub baseline: Unit,
    bits: &'a [u8],
    left_edges: &'a [u16],
    pub lowest_char: u8,
    pub highest_char: u8,
}


impl<'a> BitmapFont<'a> {
    pub fn get_glyph_width(&self, mut glyph: u8) -> Unit {
        if (glyph < self.lowest_char) || (glyph > self.highest_char) {
            glyph = self.highest_char + 1;
        }

        let glyph = glyph as usize;

        let glyph_left_edge = self.left_edges[glyph];
        let glyph_right_edge = self.left_edges[glyph + 1];

        (glyph_right_edge - glyph_left_edge) as Unit
    }
}

pub const SYSTEM_BITMAP_FONT: BitmapFont<'static> = BitmapFont {
    span: 60,
    height: 9,
    baseline: 7,
    lowest_char: 32,
    highest_char: 127,

    bits: &[
        0x02, 0xA5, 0x08, 0xC1, 0x04, 0x50, 0x40, 0x00, 0x00, 0x06, 0x2C, 0xC1, 0x71, 0x3C, 0xC6, 0x00, 
        0x00, 0x1C, 0x70, 0x8E, 0x33, 0x9D, 0xCC, 0x8A, 0x28, 0xA2, 0x0A, 0x27, 0x38, 0xE7, 0x1D, 0xD2, 
        0x8A, 0x0A, 0x28, 0xBE, 0xD0, 0x18, 0x00, 0x08, 0x08, 0x00, 0x40, 0x40, 0x85, 0x42, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x80, 0x03, 0xDF, 0xF0, 0x02, 0xA5, 0x1C, 0xCA, 
        0x8C, 0x89, 0x50, 0x00, 0x00, 0x29, 0x62, 0x23, 0x42, 0x05, 0x29, 0x00, 0x82, 0x22, 0x89, 0x49, 
        0x4A, 0x51, 0x12, 0x8A, 0x29, 0x23, 0x1B, 0x28, 0xA5, 0x14, 0xA0, 0x92, 0x8A, 0x0A, 0x28, 0x82, 
        0x88, 0x08, 0x00, 0x0C, 0x08, 0x00, 0x40, 0x80, 0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 
        0x00, 0x00, 0x00, 0x12, 0x40, 0x04, 0x50, 0x10, 0x02, 0x0F, 0xA8, 0x12, 0x89, 0x04, 0xE1, 0x00, 
        0x00, 0x49, 0x22, 0x25, 0x64, 0x09, 0x29, 0x01, 0x39, 0x04, 0xBA, 0x29, 0x42, 0x51, 0x10, 0x8A, 
        0x2A, 0x22, 0xAA, 0xA8, 0xA5, 0x14, 0x90, 0x92, 0x8A, 0x09, 0x48, 0x84, 0x84, 0x08, 0x80, 0x04, 
        0xEE, 0x31, 0xCC, 0xCE, 0xE5, 0x4A, 0xEC, 0xE3, 0x9C, 0x72, 0x6D, 0x28, 0xA4, 0xA2, 0x97, 0x92, 
        0x40, 0x08, 0x50, 0x10, 0x02, 0x05, 0x1C, 0x21, 0x21, 0x04, 0x41, 0x00, 0x00, 0x8B, 0x24, 0x49, 
        0x17, 0x10, 0xC7, 0x4A, 0x00, 0x88, 0xAA, 0x2E, 0x42, 0x5D, 0xD0, 0xFA, 0x2C, 0x22, 0x4A, 0x68, 
        0xA5, 0x14, 0x88, 0x92, 0x8A, 0x48, 0x85, 0x08, 0x82, 0x09, 0x40, 0x01, 0x29, 0x4A, 0x52, 0x92, 
        0x95, 0x52, 0x92, 0x94, 0x52, 0x94, 0x89, 0x28, 0xA4, 0x94, 0x91, 0x12, 0x46, 0x53, 0x50, 0x10, 
        0x02, 0x0F, 0x8A, 0x42, 0xC1, 0x04, 0xE7, 0xC3, 0xC1, 0x0D, 0x28, 0x2F, 0x14, 0x91, 0x21, 0x01, 
        0x39, 0x08, 0xBB, 0xE9, 0x42, 0x51, 0x16, 0x8A, 0x2A, 0x22, 0x0A, 0x28, 0xB9, 0x17, 0x04, 0x92, 
        0x8A, 0xA9, 0x42, 0x10, 0x81, 0x0A, 0x20, 0x01, 0x29, 0x42, 0x5E, 0x92, 0x95, 0x62, 0x92, 0x94, 
        0x52, 0x94, 0x49, 0x28, 0xA4, 0x88, 0x92, 0x22, 0x29, 0x88, 0x50, 0x10, 0x00, 0x05, 0x3C, 0x9A, 
        0x41, 0x05, 0x51, 0x00, 0x02, 0x09, 0x28, 0x21, 0x14, 0x91, 0x22, 0x00, 0x82, 0x00, 0x82, 0x29, 
        0x42, 0x51, 0x12, 0x8A, 0x29, 0x22, 0x0A, 0x28, 0xA1, 0x15, 0x04, 0x92, 0x53, 0x1A, 0x22, 0x20, 
        0x80, 0x88, 0x00, 0x01, 0x29, 0x42, 0x50, 0x92, 0x95, 0x52, 0x92, 0x94, 0x52, 0x94, 0x29, 0x25, 
        0x24, 0x94, 0x94, 0x12, 0x40, 0x04, 0x50, 0x10, 0x02, 0x05, 0x08, 0x19, 0xA0, 0x88, 0x41, 0x08, 
        0x14, 0x06, 0x2E, 0xC1, 0x63, 0x10, 0xC4, 0x48, 0x00, 0x08, 0x72, 0x2E, 0x3B, 0x9D, 0x0E, 0x8A, 
        0xC8, 0xBA, 0x0A, 0x27, 0x20, 0xE4, 0xB8, 0x8E, 0x22, 0x0A, 0x22, 0x3E, 0x80, 0x48, 0x00, 0x00, 
        0xAE, 0x39, 0xCE, 0x8E, 0x95, 0x4A, 0x92, 0x93, 0x9C, 0x74, 0xC4, 0xE2, 0x1B, 0x22, 0x77, 0x92, 
        0x40, 0x03, 0xD0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
        0x01, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x12, 0x40, 0x00, 0x10, 0x10, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 
        0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0A, 0x80, 0x00, 0x1F, 0xF0, 
    ],

    left_edges: &[
        0,6,8,12,18,24,30,36,39,43,47,53,59,62,67,69,76,81,84,88,92,97, 
        101,106,111,116,121,123,126,130,134,138,144,150,156,161,166, 
        171,175,179,184,190,192,196,202,206,214,220,226,231,237,242, 
        247,251,256,262,270,276,282,288,291,299,302,307,316,319,324, 
        329,334,339,344,347,352,357,358,361,366,368,376,381,387,392, 
        397,400,404,407,412,418,426,432,437,442,446,448,452,459,467, 
        477, 
    ],
};


pub struct Typesetter<'a> {
    font: &'a BitmapFont<'a>,
    left_margin: Unit,
    top_margin: Unit,
    right_margin: Unit,
    bottom_margin: Unit,

    x: Unit,
    y: Unit,
}


impl<'a> Typesetter<'a> {
    pub fn new(font: &'a BitmapFont, left_margin: Unit, top_margin: Unit, right_margin: Unit, bottom_margin: Unit) -> Self {
        Self {
            font,
            left_margin,
            top_margin,
            right_margin,
            bottom_margin,

            x: left_margin,
            y: top_margin + font.baseline,
        }
    }

    pub fn place_text(&mut self, text: &str) {
        for ch in text.bytes() {
            self.place_char(ch as u8);
        }
    }

    pub fn place_char(&mut self, ch: u8) {
        match ch {
            0x0D => {
                self.x = self.left_margin;
            },

            0x0A => {
                self.y += self.font.height;
            },

            0x0C => {
                self.y = self.top_margin + self.font.baseline;
            },

            _ => {
                let char_width = self.font.get_glyph_width(ch);
                let right_edge = self.x + char_width;
                if right_edge > self.right_margin {
                }
                self.x = right_edge;
            },
        }
    }
}

